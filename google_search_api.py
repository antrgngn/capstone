# -*- coding: utf-8 -*-
"""google search api.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ke3AnXykN3lJS6hY19vsMVmCM0Ch67M9
"""

import requests
from textblob import TextBlob
import pandas as pd

# API Setup
API_KEY = "AIzaSyCJjAdv4I-xApaFyh_JOn1nwa6aeJbxd3s"  # Replace with your API Key
CX = "71848bd9cccb64034"      # Replace with your Search Engine ID

# Search Function
def google_search(query, start_date, end_date):
    results = []
    url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "key": API_KEY,
        "cx": CX,
        "q": query,
        "dateRestrict": f"after:{start_date} before:{end_date}",
        "num": 10
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        for item in data.get("items", []):
            snippet = item.get("snippet", "")
            link = item.get("link", "")
            results.append((snippet, link))
    return results

# Sentiment Analysis Function
def analyze_sentiment(snippets):
    sentiments = []
    for snippet in snippets:
        analysis = TextBlob(snippet)
        sentiments.append(analysis.sentiment.polarity)  # Polarity ranges from -1 to 1
    return sum(sentiments) / len(sentiments) if sentiments else 0

# Designers and Timeframes
designers = [
    {"name": "Burberry", "query": "Burberry", "start_date": "2022-01-01", "end_date": "2022-06-30"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2022-06-30", "end_date": "2022-12-31"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2023-01-01", "end_date": "2023-06-30"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2024-12-14", "end_date": "2024-06-30"},
    {"name": "Riccardo Tisci Burberry", "query": "Riccardo Tisci Burberry", "start_date": "2018-01-01", "end_date": "2022-12-31"},
    {"name": "Kim Jones Dior", "query": "Kim Jones Dior", "start_date": "2019-01-01", "end_date": "2023-12-31"},
    {"name": "Kris Van Assche", "query": "Kris Van Assche Dior", "start_date": "2018-01-01", "end_date": "2019-06-30"}
]

# Fetch Data and Analyze Sentiment
results = []
for designer in designers:
    search_results = google_search(designer["query"], designer["start_date"], designer["end_date"])
    snippets = [result[0] for result in search_results]
    sentiment_score = analyze_sentiment(snippets)
    results.append({"Designer": designer["name"], "Sentiment Score": sentiment_score})

# Save Results
df = pd.DataFrame(results)
df.to_csv("designer_sentiment_scores.csv", index=False)
print(df)

import requests
from textblob import TextBlob
import pandas as pd

# API Setup
API_KEY = "AIzaSyCJjAdv4I-xApaFyh_JOn1nwa6aeJbxd3s"  # Replace with your API Key
CX = "47424aed8ab33411a"      # Replace with your Search Engine ID

# Search Function
def google_search(query, start_date, end_date):
    results = []
    url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "key": API_KEY,
        "cx": CX,
        "q": query,
        "dateRestrict": f"after:{start_date} before:{end_date}",
        "num": 10
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        for item in data.get("items", []):
            snippet = item.get("snippet", "")
            link = item.get("link", "")
            results.append((snippet, link))
    return results

# Sentiment Analysis Function
def analyze_sentiment(snippets):
    sentiments = []
    for snippet in snippets:
        analysis = TextBlob(snippet)
        sentiments.append(analysis.sentiment.polarity)  # Polarity ranges from -1 to 1
    return sum(sentiments) / len(sentiments) if sentiments else 0

# Designers and Timeframes
designers = [
    {"name": "Daniel Lee Burberry", "query": "Daniel Lee", "start_date": "2022-01-01", "end_date": "2022-06-30"},
    {"name": "Daniel Lee Burberry", "query": "Daniel Lee", "start_date": "2022-06-30", "end_date": "2022-12-31"},
    {"name": "Daniel Lee Burberry", "query": "Daniel Lee", "start_date": "2023-01-01", "end_date": "2023-06-30"},
    {"name": "Daniel Lee Burberry", "query": "Daniel Lee", "start_date": "2024-12-14", "end_date": "2024-06-30"},
    {"name": "Riccardo Tisci Burberry", "query": "Burberry", "start_date": "2018-01-01", "end_date": "2022-12-31"},
    {"name": "Kim Jones Dior", "query": "Dior", "start_date": "2019-01-01", "end_date": "2023-12-31"},
    {"name": "Kris Van Assche", "query": "Kris Van Assche", "start_date": "2018-01-01", "end_date": "2019-06-30"}
]

# Fetch Data and Analyze Sentiment
results = []
for designer in designers:
    search_results = google_search(designer["query"], designer["start_date"], designer["end_date"])
    snippets = [result[0] for result in search_results]
    sentiment_score = analyze_sentiment(snippets)
    results.append({"Designer": designer["name"], "Sentiment Score": sentiment_score})

# Save Results
df = pd.DataFrame(results)
df.to_csv("designer_sentiment_scores.csv", index=False)
print(df)

import requests
from textblob import TextBlob
import pandas as pd

# API Setup
API_KEY = "your_google_api_key"  # Replace with your API Key
CX = "your_search_engine_id"      # Replace with your Search Engine ID

# Search Function
def google_search(query, start_date, end_date):
    results = []
    url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "key": API_KEY,
        "cx": CX,
        "q": query,
        "dateRestrict": f"after:{start_date} before:{end_date}",
        "num": 10
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        for item in data.get("items", []):
            snippet = item.get("snippet", "")
            link = item.get("link", "")
            results.append((snippet, link))
    return results

# Sentiment Analysis Function
def analyze_sentiment(snippets):
    sentiments = []
    for snippet in snippets:
        analysis = TextBlob(snippet)
        sentiments.append(analysis.sentiment.polarity)  # Polarity ranges from -1 to 1
    return sum(sentiments) / len(sentiments) if sentiments else 0

# Designers and Timeframes
designers = [
    {"name": "Burberry", "query": "Burberry", "start_date": "2022-01-01", "end_date": "2022-06-30"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2022-07-01", "end_date": "2022-12-31"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2023-01-01", "end_date": "2023-06-30"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2023-07-01", "end_date": "2023-12-31"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2018-01-01", "end_date": "2018-06-30"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2018-07-01", "end_date": "2018-12-31"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2019-01-01", "end_date": "2019-06-30"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2019-07-01", "end_date": "2019-12-31"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2020-01-01", "end_date": "2020-06-30"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2020-07-01", "end_date": "2020-12-31"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2021-01-01", "end_date": "2021-06-30"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2021-07-01", "end_date": "2021-12-31"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2022-01-01", "end_date": "2022-06-30"},
    {"name": "Burberry", "query": "Burberry", "start_date": "2022-07-01", "end_date": "2022-12-31"},
    {"name": "Kim Jones Dior", "query": "Kim Jones Dior", "start_date": "2019-01-01", "end_date": "2019-06-30"},
    {"name": "Kim Jones Dior", "query": "Kim Jones Dior", "start_date": "2019-07-01", "end_date": "2019-12-31"},
    {"name": "Kim Jones Dior", "query": "Kim Jones Dior", "start_date": "2020-01-01", "end_date": "2020-06-30"},
    {"name": "Kim Jones Dior", "query": "Kim Jones Dior", "start_date": "2020-07-01", "end_date": "2020-12-31"},
    {"name": "Kim Jones Dior", "query": "Kim Jones Dior", "start_date": "2021-01-01", "end_date": "2021-06-30"},
    {"name": "Kim Jones Dior", "query": "Kim Jones Dior", "start_date": "2021-07-01", "end_date": "2021-12-31"},
    {"name": "Kim Jones Dior", "query": "Kim Jones Dior", "start_date": "2022-01-01", "end_date": "2022-06-30"},
    {"name": "Kim Jones Dior", "query": "Kim Jones Dior", "start_date": "2022-07-01", "end_date": "2022-12-31"},
    {"name": "Kim Jones Dior", "query": "Kim Jones Dior", "start_date": "2023-01-01", "end_date": "2023-06-30"},
    {"name": "Kim Jones Dior", "query": "Kim Jones Dior", "start_date": "2023-07-01", "end_date": "2023-12-31"},
    {"name": "Kris Van Assche", "query": "Kris Van Assche Dior", "start_date": "2018-01-01", "end_date": "2018-06-30"},
    {"name": "Kris Van Assche", "query": "Kris Van Assche Dior", "start_date": "2018-07-01", "end_date": "2018-12-31"},
    {"name": "Kris Van Assche", "query": "Kris Van Assche Dior", "start_date": "2019-01-01", "end_date": "2019-06-30"}
]

# Fetch Data and Analyze Sentiment
results = []
for designer in designers:
    search_results = google_search(designer["query"], designer["start_date"], designer["end_date"])
    snippets = [result[0] for result in search_results]
    sentiment_score = analyze_sentiment(snippets)
    results.append({"Designer": designer["name"], "Start Date": designer["start_date"], "End Date": designer["end_date"], "Sentiment Score": sentiment_score})

# Save Results
df = pd.DataFrame(results)
df.to_csv("designer_sentiment_scores.csv", index=False)
print(df)